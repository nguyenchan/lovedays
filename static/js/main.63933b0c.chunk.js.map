{"version":3,"sources":["components/Lovedays/DisplayCounter.js","components/Lovedays/Lovedays.js","App.js","serviceWorker.js","index.js"],"names":["Display","props","_map","days","hours","mins","secs","map","num","_map2","Object","slicedToArray","react_default","a","createElement","className","Lovedays","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","counter","_update","_updateCounter","bind","assertThisInitialized","_this2","timerID","setInterval","clearInterval","remainderS","Math","floor","countDays","setState","Date","_extractData","Component","App","Lovedays_Lovedays","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sSAGe,SAASA,EAAQC,GAAO,IAAAC,EACL,CAC9BD,EAAME,KACNF,EAAMG,MACNH,EAAMI,KACNJ,EAAMK,MACNC,IAAI,SAAAC,GAAG,OAAKA,EAAM,GAAK,IAAMA,EAAMA,IANAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAR,EAAA,GAChCC,EADgCM,EAAA,GAC1BL,EAD0BK,EAAA,GACnBJ,EADmBI,EAAA,GACbH,EADaG,EAAA,GAOrC,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,WACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASZ,EAAO,SAC/BS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACZX,EADH,IACWC,EADX,IACkBC,QCZHU,cACnB,SAAAA,EAAYf,GAAO,IAAAgB,EAAA,OAAAP,OAAAQ,EAAA,EAAAR,CAAAS,KAAAH,IACjBC,EAAAP,OAAAU,EAAA,EAAAV,CAAAS,KAAAT,OAAAW,EAAA,EAAAX,CAAAM,GAAAM,KAAAH,KAAMlB,KACDsB,MAAQ,CACXC,QAASvB,EAAMuB,SAEjBP,EAAKQ,QAAUR,EAAKS,eAAeC,KAApBjB,OAAAkB,EAAA,EAAAlB,QAAAkB,EAAA,EAAAlB,CAAAO,KALEA,mFAQC,IAAAY,EAAAV,KAClBA,KAAKW,QAAUC,YAAY,kBAAMF,EAAKH,kBAAkB,oDAIxDM,cAAcb,KAAKW,8CAGRN,GAUX,OATkB,SAAAA,GAChB,IACIS,EAAaT,EAAU,MAI3B,MAAO,CAAErB,KALE+B,KAAKC,MAAMX,EAAU,OAKjBpB,MAHH8B,KAAKC,MAAMF,EAAa,MAGd5B,KAFX6B,KAAKC,MAAOF,EAAa,KAAW,KAEnB3B,KADjB4B,KAAKC,MAAQF,EAAa,KAAW,IAAS,MAGhDG,CAAUZ,4CAKrBL,KAAKkB,SAAS,CACZb,QAAS,IAAIc,KAAS,IAAIA,KAAK,4DAKjC,OAAO1B,EAAAC,EAAAC,cAACd,EAAYmB,KAAKoB,aAAapB,KAAKI,MAAMC,iBArCfgB,aC2BvBC,0LAvBX,OACE7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,WAASC,UAAU,oBACjBH,EAAAC,EAAAC,cAAC4B,EAAD,gBANMF,cCOEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.63933b0c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./DisplayCounter.css\";\n\nexport default function Display(props) {\n  let [days, hours, mins, secs] = [\n    props.days,\n    props.hours,\n    props.mins,\n    props.secs\n  ].map(num => (num < 10 ? \"0\" + num : num));\n  return (\n    <div className=\"days_wrapper\">\n      <div className=\"_title\">IN LOVE</div>\n      <div className=\"_days\">{days + \" DAYS\"}</div>\n      <div className=\"_hours\">\n        {hours}:{mins}:{secs}\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport Display from \"./DisplayCounter.js\";\n\nexport default class Lovedays extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      counter: props.counter\n    };\n    this._update = this._updateCounter.bind(this);\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this._updateCounter(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  _extractData(counter) {\n    const countDays = counter => {\n      let days = Math.floor(counter / 86400000);\n      let remainderS = counter % 86400000;\n      let hours = Math.floor(remainderS / 3600000);\n      let mins = Math.floor((remainderS % 3600000) / 60000);\n      let secs = Math.floor(((remainderS % 3600000) % 60000) / 1000);\n      return { days, hours, mins, secs };\n    };\n    let data = countDays(counter);\n    return data;\n  }\n\n  _updateCounter() {\n    this.setState({\n      counter: new Date() - new Date(\"Oct 26, 2012 22:00:00\")\n    });\n  }\n\n  render() {\n    return <Display {...this._extractData(this.state.counter)} />;\n  }\n}\n","import React, { Component } from \"react\";\nimport { Icon } from \"antd\";\nimport Lovedays from \"./components/Lovedays\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <section className=\"lovedays-wrapper\">\n            <Lovedays />\n          </section>\n          {/* <section className=\"profile-wrapper\">\n            <section className=\"_theguy\">\n              <img src=\"#\" alt=\"\" className=\"guy_pic\" />\n              <div clasName=\"guy_name\">Name</div>\n            </section>\n            <Icon type=\"heart\" theme=\"filled\" />\n            <section className=\"_thegirl\">\n              <img src=\"#\" alt=\"\" className=\"girl_pic\" />\n              <div className=\"girl_name\">name</div>\n            </section>\n          </section> */}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}